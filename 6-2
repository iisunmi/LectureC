// library headers ////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// global variables ///////////////////////////////////////


// section function body //////////////////////////////////









struct_std(){
char name[60];
int kor;
int eng;
int math;
};


// start program //////////////////////////////////////////


int main(void) {
	//정적 배열 : 선언의 제한이 있다 / 동적 배열을 사용하는 이유

	int nums[10];//선언 시 길이를 변수로 사용할 수 없다
	int len = 10;
	int* p = (int*)malloc(len * 4); // 동적배열은 길이 변경이 가능하다

	//정적배열은 길이를 추가(늘린다)한다는 것은 불가능하지만, 동적배열은 가변길이로 변경이 가능하다

	len += 12;
	p=realloc(p,len+12); // 이 함수는 동적할다응로 생성된 것만 사용 가능
	                     // 첨에 10개였는데 +12해서 22개를 다른 공간에 만든다
	                     // 이때, 주소가 변경되니 반환값을 꼭 작성할것!!
	free(p); // 해제한다!


	return 0;

}





int main22(void) {
	//동적할당 : 포인터변수와 함수 쓰는법을 알면 됨, 결국 배열 만들기임
	int length = 60; // 배열은 길이가 중요하니깐
	char* p = (char*)malloc(length*sizeof(char)/*내가 원하는 전체크기*/); //malloc함수가 반환하는 주소를 담는다
	                                                                  //==p[0]~p[59]
	char arr[60];//바로 윗줄과 동일한 의미


	for (int i = 0; i < length; i++) {
		p[i] = 'a' + i; //배열이라고 생각해라.

	}
	

	//동적할당으로 생성된 공간, 배열은 반드시 해제해야한다, 다른 이들이 메모리를 쓸수있도록 확보하는 작업.
	if (p != NULL); // 
	   free(p); // 할당받은 주소를 다시 써야하므로 p변수를 변경하면 안 된다
	p = NULL;

	return 0;
}





int main111(int argc, char** argv) {
	//배열 쪼개기  : 크기가 다른 여러개의 데이터를 다룰 수 있다 => 위의 구조체 쓰는게 더 효율적
	char student[80] = { 0 };
	char* name = student; //char형 포인터 / 0번에서부터 학생들을 저장한다
	int* kor = student + 60;
	int* eng = student + 64;
	int* math = student + 68;
	int* score =(int*)(student + 60); //==&student[60] / 60번 요소의 주소 / int형 포인터/ 60번에서부터 점수를 저장한다
	                           //포인터변수는 선언 시 지정된 자료형에 따라 동작한다
	scanf_s("%s", name, 60);
	scanf_s("%d %d %d", score + 0, score + 1, score + 2);
	printf("%s : {%d %d %d}\n", name, *kor, *eng, *math); // score[0], score[1], score[2]);

	return 0;
}
// end program
