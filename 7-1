// library headers ////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h> // 기능키 처리할 수 있는 함수 모음집 
//#include < ctype.h >
#include <Windows.h> //콘솔 커서 이동

// global variables ///////////////////////////////////////
struct position {
	int x;
	int y;
	int u;
	int d;
	int l;
	int r;
};
struct _coord {
	int length; // arr 배열의 길이(점차 증가)
	//struct position array[30*15]; //정적배열
	struct position *array;         //동적배열

};
typedef struct _coord Coord;
typedef struct position Position;








#define W 30        //가로 define : 전처리 명령, 매크로상수, 상수니까 대입연산을 못 함
#define H 15        //세로
int map[H][W];//전역 배열을 제작. 이는 모든 함수에서 접근이 가능함, 0 초기화

// section function body //////////////////////////////////
int showMap(void) {
	//키보드로 이동을 시키고 이동경로를 벽으로 만든다
	//한 번씩 입력 시 화면을 그리고 출력하고 지우는 동작 반복을 한다
	//끝날 때는 엔터키를 입력하면 종료가 된다
	system("cls");
	for (int r = 0; r < H; r++) { // 행:H
		for (int c = 0; c < W; c++) {// 열:W
			printf("%s", (map[r][c] = 2) ? "→" :
				(map[r][c] = 1) ? "□" : "■"); // 지나간 길은 1이 된다. 0은 빈공간.스페이스로 만들겠다

		}
		putchar('\n');
	}
	return 0;
}


//콘솔 화면 내 위치 : gotoxy() ; Win32 API (C), MFC C++
int drawMapWinAPI(void) {
	//키보드로 이동을 시키고 이동경로를 벽으로 만든다
	//한 번씩 입력 시 화면을 그리고 출력하고 지우는 동작 반복을 한다
	//끝날 때는 엔터키를 입력하면 종료가 된다

	COORD cursor = { 0 };
	map[cursor.Y][cursor.X] = 1;
	showMap();
	while (1) { //무한루프 제작
		SetConsoleCursorPosition(
			GetStdHandle(STD_OUTPUT_HANDLE), cursor);
		printf("☆");
		  // 키보드로 입력했을 때
		if (_kbhit()) { //인터럽트 또는 키보드 이벤트 발생이라고 한다
			//입력된 문자를 확인
			char ch = _getch(); //에코 기능이 없음 , 즉, 내가 입력한 글자가 화면에 보이는 기능이 없음


			/*
			방향키는 기능키인데, 이걸 적용하는건 매우 어려운 일이다
			기능키 입력 시, 2byte을 전달
			첫 1byte는 0 또는 0xE0
			두번째 byte는 실제키값
			*/

			if (ch == -32) { //ch==0xE0는 불가하다. 왜?E0=224  /음수로 처리한다= 방향키가 입력되었다
				ch = _getch();
			}


			if (ch == '\r') {//엔터키 입력 / \n이 아니라 \r임을 기억하자!!!!!
				break; // while loop를 멈춤 or return을 해서 함수를 종료시키는 방법도 있음
					   // 아래의 return 바로 전으로 가게 된다.
			}
			//ch = tolower(ch); //문자변환법-소문자로 만들기 //toupper(ch);-대문자로 만들기 // <ctype.h> 가 필요함
			//키보드 입력 중에 방향키이동이 있다
			//방향키 이동 =1

			if (ch == 'w' || ch == 'W' || ch == 72) {//up
				cursor.Y--;
				if (cursor.Y < 0)cursor.Y++;
			}
			if (ch == 's' || ch == 'S' || ch == 80) {//down
				cursor.Y++;
				if (cursor.Y >= H)cursor.Y--;
			}
			if (ch == 'a' || ch == 'A' || ch == 75) {//left
				// cursor 의 이동은 1글자 길이인데 
				// 화면 출력 시 글자는 2글자 길이로 출력
				cursor.X -= 2;// 2글자 크기로 이동해야 함.
				if (cursor.X < 0)cursor.X += 2;
			}
			if (ch == 'd' || ch == 'D' || ch == 77) {//right
				cursor.X += 2;
				if (cursor.X >= W * 2)cursor.X -= 2;
			}
			//현재 위치 표시
			map[cursor.Y][cursor.X / 2] = 1;
		}
	}// end while
	map[cursor.Y][cursor.X / 2] = 2;
	printf("end drawMap()\n\n");
	return 0;
}





int drawMap(void) {
	//키보드로 이동을 시키고 이동경로를 벽으로 만든다
	//한 번씩 입력 시 화면을 그리고 출력하고 지우는 동작 반복을 한다
	//끝날 때는 엔터키를 입력하면 종료가 된다
	
	int iy, ix;
	iy = ix = 0;

	while (1) { //무한루프 제작
		system("cls"); // 콘솔 상에서 실행할 수 있는 프로그램 / 화면을 지우라는 명령 *리눅스-system("clear")
		for (int r = 0; r < H; r++) { // 행:H  / r행 /세로
			for (int c = 0; c < W; c++) {// 열:W  /c열 /가로
				if (r==iy && c==ix) {
					printf("★");//영문자를 제외한 타국어는 전부 문자열이다
				}
				else{
					printf("%s", (map[r][c])?"□":"■"); // 지나간 길은 1이 된다. 0은 빈공간.스페이스로 만들겠다
					                             //0이 아닐때는 
				}
			}
			putchar('\n');
		} // end for문
		  // 키보드로 입력했을 때
		if (_kbhit()) { //인터럽트 또는 키보드 이벤트 발생이라고 한다
			//입력된 문자를 확인
			char ch = _getch(); //에코 기능이 없음 , 즉, 내가 입력한 글자가 화면에 보이는 기능이 없음
			
								
			/*
			방향키는 기능키인데, 이걸 적용하는건 매우 어려운 일이다
			기능키 입력 시, 2byte을 전달
			첫 1byte는 0 또는 0xE0
			두번째 byte는 실제키값
			*/
			
			if (ch == -32) { //ch==0xE0는 불가하다. 왜?E0=224  /음수로 처리한다= 방향키가 입력되었다
				ch = _getch();
			}





			if (ch == '\r') {//엔터키 입력 / \n이 아니라 \r임을 기억하자!!!!!
				break; // while loop를 멈춤 or return을 해서 함수를 종료시키는 방법도 있음
					   // 아래의 return 바로 전으로 가게 된다.
			}
			//ch = tolower(ch); //문자변환법-소문자로 만들기 //toupper(ch);-대문자로 만들기 // <ctype.h> 가 필요함
			//키보드 입력 중에 방향키이동이 있다
			//방향키 이동 -1

			if (ch == 'w'|| ch == 'W' || ch==72) {//up
				--iy;
			}
			if (ch == 's' || ch == 'S' || ch==80) {//down
				++iy;
			}
			if (ch == 'a' || ch == 'A' || ch == 75) {//left
				--ix;
			}
			if (ch == 'd' || ch == 'D' || ch == 77) {//right
				++ix;
			}
			//현재 위치 표시
			map[iy][ix] = 1;
			//map[iy][ix] = 1- map[iy][ix] //토글링 0과 1이 스위칭됨 / 지나간 길을 다시 되돌아가면 1을 0으로 바꿀 때 사용할수있음
		}
	}
	printf("end drawMap()\n\n");
	return 0;
}


Coord* searchMap(void) { //Coord를 반환
//map[][];

	Coord *var;
	var = (Coord*)malloc(sizeof(Coord));// 구조체 변수 한개를 만들었다
	var->length = 0;
	var->array = NULL;// Position *
	for (int r = 0; r < H; ++r) { // 행 : H
		for (int c = 0; c < W; ++c) { // 열 : W
			Position pos = { 0 };
			pos.y = r;
			pos.x = c;
			if (r > 0 && map[r - 1][c] == 1)	pos.u = 1;
			if (r < H - 2 && map[r + 1][c] == 1)	pos.d = 1;
			if (c > 0 && map[r][c - 1] == 1)	pos.l = 1;
			if (c < W - 2 && map[r][c + 1] == 1)	pos.r = 1;
			var->length++;
			var->array = (Position*)realloc(var->array, var->length * sizeof(Position));
			if (var->array == NULL) {
				printf("\n\nfatal errror : searchMap's reallocation\n\n");
				exit(1);
			}
			var->array[var->length - 1] = pos;
		}
	}// end for

	return var;
}


// start program //////////////////////////////////////////
int main(int argc, char** argv) {

	drawMapWinAPI(); // 함수를 호출하는 위치임. 반드시 여기보다 '위'에 선언 또는 정의가 있어야함
	showMap();
	Coord* cp=searchMap(); //각 위치에서 이동할 수 있는 방향 기록
	                     // 전역으로 있는 map배열을 탐색할것임/ 정적이 아닌 동적배열을 사용
	 //코드를 보고 필요한 구조체를 정의할수 있는가?예 아니오..
	for (int i = 0; i < cp->length; i++) {
		int sum = cp->array[i].u + cp->array[i].d + cp->array[i].l + cp->array[i].r;
		
		if (sum > 2) {//교차 지점만 출력
			printf("(%d, %d){%d %d %d %d}\n",
				cp->array[i].x,    //coord 안에 배열(위치값있음)이 들어있다. (배열의)길이값도 들어있다
				cp->array[i].y,
				cp->array[i].u,
				cp->array[i].d,
				cp->array[i].l,
				cp->array[i].r
			);
		}//end if
	}//end for

	return 0;
}
// end program
