#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main(void) {
	printf("a\n");
	return 0;

	/* 제어문
	반복문 : for, while, do-while
	분기문 : if(논리), switch(상수, 산술)

	예제1) 1~25 까지 연속하는 정수들을 출력하라.
	답1. printf("1 2 3 4...25 \n"); 직접 다 적기
	답2. for(int n=1; n<26;n++) 제어문 활용 (코드 줄여서 효율적으로 작성)
	    '연속하는 무엇'은 for문 활용하기
		 for(초기식;조건식;증감식)
	답3. int min = 1;  입력받기
	     int max =25;  입력받기
		 for (int n = min;n<=25;n++)
	보충. 사용자가 min과 max를 반대로 입력했다면? 
	     1) 스와핑
		 1-1) 반대로 입력한 사실을 인지하고, 두 변수값을 교환하도록 코드작성한다.
		     '인지하도록'은 분기문 활용하기
			  if(min>max) {
			  int temp = min; min변수에 있는 값을 temp에 담아놓은 상태
			  min=max; min에 있는 걸 max로 덮어쓴 상태
			  max=temp;}  temp에 있던 min을 max에 담기
		 1-2) 비트연산자 xor 연산 활용법

		 2) 사용자에게 다시 입력하라고 하게 코드작성한다.
	     
	예제2) 1~25 까지 연속하는 정수들을 5행5열로 출력하라.
	답1. 행 하나에 5개이면 행을 내려서 출력하는 것
	     int cnt=0; 출력한 적이 없기 때문에 초기값은 0
		 for(int v =1; v<26; v++) {
	     printf("%d", v);
		 if(cnt==5){
		 printf("\n");
		 cnt=0; }}1개 행이 끝났을 때 cnt가 0이 되어야 다음행을 '별도로' 계산할 수 있음

	예제3) 1~25 까지 연속하는 정수들을 5행5열로 출력하라.
	답1. 2차구조-표 틀을 미리 만들어서 입력하여 처리하기(행우선방식)
	     중첩for문 활용하기
	     int v=1;
	     for(int r=0;r<5;r++){   r변수는 행 나열
		   for(int c=0;c<5;c++){  c변수는 열 나열
		     printf("%d\t",v);
			 v++; 연속하는 정수값 표현
			 if(v>25){
			 exit(1);}} 무한정 숫자가 늘어나니 강제종료해야함, 소괄호안엔 숫자 암거나 넣어.

			printf("\n);}

		









	*/
